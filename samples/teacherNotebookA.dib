#!csharp

var global_magic_number = "42";

#!markdown

# Challenge Linked List

#!markdown

## [ChallengeSetup]

#!csharp

// display message directly
Lesson.CurrentChallenge.AddRule(
    (ruleContext) => {
        if (context.Code.Contains(4))
        {
            context.Pass("Good job. Your answer contains 4.");
        }
        else
        {
            context.Fail("Your answer does not contain 4.");
        }
    }
);

#!csharp

// using exceptions
Lesson.CurrentChallenge.AddRule(
    (ruleContext) => {
        LinkedList testlist = LinkedList.GetRandomList();
        if (!LinkedList.IsValid(context.ReturnValue))
        {
            LinkedList.Display();
            throw new Exception($"The result you returned does not correspond to a valid linked list. See above");
        }
        context.Pass("Good job. The result you returned is a valid linked list");
    }
);

#!csharp

// using FluentAssertions (exceptions)
Lesson.CurrentChallenge.AddRule(
    (ruleContext) => {
        context.ReturnValue.Should().Contain(3.14, "Your answer is not correct");
        context.Pass("Good job. Your answer is correct.");
    }
);

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(
    async (challengeContext) => {
        // await challengeContext.StartChallengeAsync("BFS");
        await challengeContext.StartNextChallengeAsync();
    }
);

#!markdown

## [QuestionSetup]

#!csharp

double GetConstant() => 1.0;

public class LinkedList { } 

Formatter.Register<LinkedList>( ... );

#!csharp

double pi = 3.14;

#!markdown

## [Question]

#!markdown

### Question 1: Linked List

#!markdown

A linked list is a .....

#!markdown

This is an example implementation of reversing linked list using recursion.

#!csharp

void ReverseLinkedList(LinkedList head)
{
    // stuff here
}

#!markdown

Now, you will implement reversing a linked list using iteration

#!csharp

// type your answer here
// remove the throw new and starting type ur answer
void DFSIterative() 
{
    throw new NotImplementedException();
}

#!markdown

Applications of linked list include

Stuff

#!markdown

## [Scratchpad]

#!csharp

double area(double x, double y) => GetConstant() * x * y;
