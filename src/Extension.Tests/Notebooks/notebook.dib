#!csharp

lesson setup 1

#!csharp

lesson setup 2

#!markdown

# [Challenge] LinkedList

#!csharp

// display message directly
Lesson.CurrentChallenge.AddRule(
    (ruleContext) => {
        if (context.Code.Contains(4))
        {
            context.Pass("Good job. Your answer contains 4.");
        }
        else
        {
            context.Fail("Your answer does not contain 4.");
        }
    }
);

#!markdown

## [ChallengeSetup]

#!csharp

double GetConstant() => 1.0;

public class LinkedList { } 

Formatter.Register<LinkedList>( ... );

#!markdown

## [Question]

#!markdown

### Question 1: Linked List

#!markdown

A linked list is a .....

#!markdown

This is an example implementation of reversing linked list using recursion.

#!csharp

void ReverseLinkedList(LinkedList head)
{
    // stuff here
}

#!markdown

## [Scratchpad]

#!csharp

double area(double x, double y) => GetConstant() * x * y;

#!markdown

# [Challenge] DFS

#!csharp

second challenge
